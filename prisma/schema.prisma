// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  firstName String @map("first_name") // Maps to "first_name" column in DB
  lastName String? @map("last_name")
  age Int?
  writtenPosts Post[] @relation("WrittenPosts") // Relationship
  likedPosts Post[] @relation("LikedPosts")
  profile Profile?
  role RoleEnum @default(USER)
  roles Role[] @relation("UserRoles")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Automatically updates on each update

  tempField String? @ignore // Ignored by prisma "tempField" in prisma but present in DB

  @@map("user_data") // Maps the model to the "user_data" table in DB
  @@unique([firstName, lastName]) // Ensures that the combination is unique
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String?
  published Boolean @default(false)
  authorId Int
  author User @relation("WrittenPosts", fields: [authorId], references: [id]) // Foreign key to User model
  likers User[] @relation("LikedPosts")
  comments Comment[]
  createdAt DateTime @default(now())

  @@index([title, published])
}

model Comment {
  id Int @id @default(autoincrement())
  content String 
  postId Int
  post Post @relation(fields: [postId], references: [id])
}

model Profile {
  id Int @id @default(autoincrement())
  bio String?
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  users User[] @relation("UserRoles")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  price Int
  stock Int
  createdAt DateTime @default(now())
}

model Order {
  userId Int
  productId Int

  @@id([userId, productId]) // Composite primary key
}

enum RoleEnum {
  USER
  ADMIN
  MODERATOR
}